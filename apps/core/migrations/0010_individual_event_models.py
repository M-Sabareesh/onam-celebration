# Generated by Django 4.2.23 on 2025-08-26 (Manual migration)

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0009_eventscore'),
    ]

    operations = [
        # Add participation_type and individual_points_multiplier to Event model
        migrations.AddField(
            model_name='event',
            name='participation_type',
            field=models.CharField(
                choices=[('team', 'Team Event'), ('individual', 'Individual Event'), ('both', 'Both Team and Individual')],
                default='team',
                max_length=20
            ),
        ),
        migrations.AddField(
            model_name='event',
            name='individual_points_multiplier',
            field=models.DecimalField(
                decimal_places=2,
                default=1.0,
                help_text="Multiplier for individual points that go to team",
                max_digits=3
            ),
        ),
        
        # Create IndividualParticipation model
        migrations.CreateModel(
            name='IndividualParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.event')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.player')),
            ],
            options={
                'unique_together': {('event', 'player')},
            },
        ),
        
        # Create IndividualEventScore model
        migrations.CreateModel(
            name='IndividualEventScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('team_points', models.DecimalField(decimal_places=2, default=0, help_text="Points contributed to player's team", max_digits=5)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about the scoring')),
                ('awarded_by', models.CharField(help_text='Admin who awarded the points', max_length=100)),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.event')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.player')),
            ],
            options={
                'ordering': ['-points', 'player__name'],
                'unique_together': {('event', 'player')},
            },
        ),
        
        # Create IndividualEventVote model
        migrations.CreateModel(
            name='IndividualEventVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill_score', models.PositiveIntegerField(help_text='Skill/Technique (1-10)')),
                ('creativity_score', models.PositiveIntegerField(help_text='Creativity/Originality (1-10)')),
                ('presentation_score', models.PositiveIntegerField(help_text='Presentation/Stage Presence (1-10)')),
                ('overall_score', models.PositiveIntegerField(help_text='Overall Performance (1-10)')),
                ('comments', models.TextField(blank=True, help_text='Optional feedback')),
                ('voted_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.event')),
                ('performing_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_received', to='core.player')),
                ('voting_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_given', to='core.player')),
            ],
            options={
                'unique_together': {('event', 'voting_player', 'performing_player')},
            },
        ),
    ]
